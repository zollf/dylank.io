name: Production

on:
  push:
    branches: [main]

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id     : ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key : ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region            : "ap-southeast-2"
      - name: Terraform Check & Init
        run : |
          terraform -chdir=terraform fmt -check 
          terraform -chdir=terraform init
      - name: Terraform Apply
        run : terraform -chdir=terraform apply -auto-approve
  
  react:
    name: React Test
    runs-on: ubuntu-latest
    needs: [terraform]
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'
      - name: Yarn Install
        run: cd frontend && yarn
      - name: Yarn Test
        run: cd frontend && yarn test
      - name: Yarn Lint
        run: cd frontend && yarn lint
      - name: Yarn Build
        run: cd frontend && yarn build
        
  go:
    name: Go Test
    runs-on: ubuntu-latest
    needs: [terraform]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Make Environment File
        uses: SpicyPizza/create-envfile@v1
        with:
          envkey_JWT_SECRET: ${{ secrets.JWT_SECRET }}
          envkey_MYSQL_DSN: ${{ secrets.MYSQL_DSN }}
          envkey_ENV: production
          file_name: .env 
      - name: CP .env
        run: cp .env backend
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.17.2'
      - name: Go Modules Download
        run: cd backend && go mod download
      - name: Go Tests
        run: cd backend && go test ./tests --v
      - name: Go Build
        run: cd backend && go build -o server server.go
        
  ecr-go:
    name: Upload go image to ECR
    runs-on: ubuntu-latest
    needs: [go]
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Make Environment File
        uses: SpicyPizza/create-envfile@v1
        with:
          envkey_JWT_SECRET: ${{ secrets.JWT_SECRET }}
          envkey_MYSQL_DSN: ${{ secrets.MYSQL_DSN }}
          envkey_AWS_ACCESS_KEY_ID: ${{ secrets.SITE_AWS_ACCESS_KEY_ID }}
          envkey_AWS_SECRET_ACCESS_KEY: ${{ secrets.SITE_AWS_SECRET_ACCESS_KEY }}
          envkey_AWS_REGION: ap-southeast-2
          envkey_S3_BUCKET: ${{ secrets.SITE_S3_BUCKET }}
          envkey_MIGRATE: "Yes"
          envkey_ENV: production
          file_name: .env 
      - name: CP .env
        run: cp .env backend
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id     : ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key : ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region            : "ap-southeast-2"
      - name: Upload
        run: sh deploy.sh dylankio_go_image ${{ secrets.AWS_URL }} ap-southeast-2 docker/prod/go.Dockerfile
  
  ecr-node:
    name: Upload node image to ECR
    runs-on: ubuntu-latest
    needs: [react]
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id     : ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key : ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region            : "ap-southeast-2"
      - name: Upload
        run: sh deploy.sh dylankio_node_image ${{ secrets.AWS_URL }} ap-southeast-2 docker/prod/node.Dockerfile

  ecr-nginx:
    name: Update nginx image to ECR
    runs-on: ubuntu-latest
    needs: [terraform]
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id     : ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key : ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region            : "ap-southeast-2"
      - name: Upload
        run: sh deploy.sh dylankio_nginx_image ${{ secrets.AWS_URL }} ap-southeast-2 docker/prod/nginx.Dockerfile

  ecs:
    name: Deploy new service
    runs-on: ubuntu-latest
    needs: [ecr-go, ecr-node, ecr-nginx]
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id     : ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key : ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region            : "ap-southeast-2"
      - name: Update service
        run: aws ecs update-service --cluster main-cluster --service dylankio_service --force-new-deployment --region ap-southeast-2 >> dev.txt
